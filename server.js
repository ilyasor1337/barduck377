const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname)));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// API –∫–ª—é—á –¥–ª—è API-Football (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const API_KEY = process.env.API_FOOTBALL_KEY || '1d1ee6a0b58d0f24b90e3f001988723f';

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let matchesCache = {};
let lastUpdateTime = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8053353316:AAGk7ZvU1xvQJvntsUT80C8FyVuATLceXtE';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '945092277';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(bookingData) {
  try {
    const message = `
üÜï –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!
üë§ –ò–º—è: ${bookingData.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.phone}
üìÖ –î–∞—Ç–∞: ${new Date(bookingData.date).toLocaleString('ru-RU')}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${bookingData.guests}
    `;

    await bot.sendMessage(TELEGRAM_CHAT_ID, message);
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö
async function fetchMatches(leagueId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    const today = new Date();
    const nextWeek = new Date();
    nextWeek.setDate(today.getDate() + 7);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const formatDate = (date) => {
      return date.toISOString().split('T')[0];
    };

    const fromDate = formatDate(today);
    const toDate = formatDate(nextWeek);

    console.log(`–ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ ${leagueId}:`, {
      from: fromDate,
      to: toDate
    });

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
    const response = await axios.get(`https://v3.football.api-sports.io/fixtures`, {
      params: {
        league: leagueId,
        season: 2023,
        from: fromDate,
        to: toDate,
        timezone: 'Europe/Moscow'
      },
      headers: {
        'x-rapidapi-host': 'v3.football.api-sports.io',
        'x-rapidapi-key': API_KEY
      }
    });

    console.log('API Response Status:', response.status);
    console.log('API Response Data:', response.data);

    if (response.data && response.data.response) {
      console.log('API response has data.response');
      const matches = response.data.response.map(match => ({
        strEvent: `${match.teams.home.name} vs ${match.teams.away.name}`,
        dateEvent: match.fixture.date.split('T')[0],
        strTime: match.fixture.date.split('T')[1].slice(0, 5),
        status: match.fixture.status.short,
        score: match.goals.home !== null ? `${match.goals.home} - ${match.goals.away}` : null,
        venue: match.fixture.venue.name
      }));

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ ${leagueId}`);

      // –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (matches.length === 0) {
        console.log('API returned 0 matches. Returning test data.');
        console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–≥–∏', leagueId);
        return [
          {
            strEvent: "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á 1",
            dateEvent: fromDate,
            strTime: "15:00",
            status: "NS",
            score: null,
            venue: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞–¥–∏–æ–Ω 1"
          },
          {
            strEvent: "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á 2",
            dateEvent: fromDate,
            strTime: "18:00",
            status: "NS",
            score: null,
            venue: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞–¥–∏–æ–Ω 2"
          }
        ];
      }

      return matches;
    }
    return [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', {
      message: error.message,
      response: error.response ? {
        status: error.response.status,
        data: error.response.data
      } : null
    });

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
    return [
      {
        strEvent: "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á 1",
        dateEvent: new Date().toISOString().split('T')[0],
        strTime: "15:00",
        status: "NS",
        score: null,
        venue: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞–¥–∏–æ–Ω 1"
      },
      {
        strEvent: "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á 2",
        dateEvent: new Date().toISOString().split('T')[0],
        strTime: "18:00",
        status: "NS",
        score: null,
        venue: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞–¥–∏–æ–Ω 2"
      }
    ];
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
async function updateCache() {
  const now = Date.now();
  if (lastUpdateTime && now - lastUpdateTime < CACHE_DURATION) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return;
  }

  try {
    // ID –ª–∏–≥ –≤ API-Football
    const leagues = {
      39: '–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞',
      140: '–ò—Å–ø–∞–Ω—Å–∫–∞—è –õ–∞ –õ–∏–≥–∞',
      135: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –°–µ—Ä–∏—è –ê',
      78: '–ù–µ–º–µ—Ü–∫–∞—è –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞',
      61: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –õ–∏–≥–∞ 1'
    };

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...');

    for (const [leagueId, leagueName] of Object.entries(leagues)) {
      console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ ${leagueName} (ID: ${leagueId})...`);
      const matches = await fetchMatches(leagueId);
      if (matches !== null) {
        matchesCache[leagueId] = {
          name: leagueName,
          matches: matches
        };
        console.log(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–≥–∏ ${leagueName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
      }
    }

    lastUpdateTime = now;
    console.log('–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(updateCache, CACHE_DURATION);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
updateCache();

app.get('/api/sports', async (req, res) => {
  const leagueId = req.query.id;
  console.log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ ID: ${leagueId}`);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  await updateCache();

  const leagueData = matchesCache[leagueId];

  if (!leagueData) {
    console.log(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ ID: ${leagueId}`);
    return res.status(404).json({
      error: '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
    });
  }

  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–≥–∏ ID: ${leagueId}`, {
    name: leagueData.name,
    matchesCount: leagueData.matches.length
  });

  return res.json({
    name: leagueData.name,
    events: leagueData.matches
  });
});

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
app.post('/api/send-booking', express.json(), async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
  console.log('Headers:', req.headers);
  console.log('Body:', req.body);

  const bookingData = req.body;
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingData);

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram...');
    await sendTelegramNotification(bookingData);
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    res.json({ message: '–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ–Ω–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏' });
  }
});

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
app.post('/api/send-order', express.json(), async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑');
  console.log('Body:', req.body);

  const orderData = req.body;
  const { items, total, table, comment } = orderData;

  if (!items || !Array.isArray(items) || items.length === 0) {
    console.error('–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    return res.status(400).json({ error: '–ó–∞–∫–∞–∑ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' });
  }

  if (!table) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞');
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞' });
  }

  try {
    let message = 'üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n';
    message += `–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: ${table}\n`;
    if (comment) {
      message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}\n`;
    }
    message += '\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n';

    items.forEach(item => {
      message += `- ${item.name} (${item.details}) x ${item.quantity} = ${item.price * item.quantity}–†\n`;
    });

    message += `\n–ò—Ç–æ–≥–æ: ${total}`;
    message += '\n\n–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞ –±–∞—Ä–µ.';

    await bot.sendMessage(TELEGRAM_CHAT_ID, message);
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');

    res.json({ message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 404
app.use((req, res) => {
  console.log(`404 - –ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å: ${req.path}`);
  res.status(404).json({ error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞ –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
  console.log(`üì± Telegram –±–æ—Ç: ${TELEGRAM_BOT_TOKEN ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`‚öΩ API Football: ${API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
});